1.      Write a MongoDB query to sort customer details in ascending order of their name.

invoice> db.CUSTOMER.find().sort({name:1})
[
  {
    _id: ObjectId('67fe2ef2f7473387b4ef6355'),
    cust_id: 102,
    name: 'aysha',
    ph_no: 9746727217,
    city: 'payyanakal'
  },
  {
    _id: ObjectId('67fe2ef2f7473387b4ef6354'),
    cust_id: 101,
    name: 'frina',
    ph_no: 9746887331,
    city: 'calicut'
  }
]


2.      Write a MongoDB query to count number of customers in each city.

invoice> db.CUSTOMER.aggregate([{$group: {_id: "$city", CUSTOMERCount: { $sum: 1 } } }])
[
  { _id: 'calicut', CUSTOMERCount: 1 },
  { _id: 'payyanakal', CUSTOMERCount: 1 }
]

3.      Write a MongoDB query to find minimum and maximum age in each city.

#for that i need to update my customer:

invoice> db.CUSTOMER.updateOne({cust_id:101},{$set:{age:21}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
invoice> db.CUSTOMER.updateOne({cust_id:102},{$set:{age:22}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}

#now
invoice> db.CUSTOMER.aggregate([{$group:{_id:"$city",minAge:{$min:"$age"},maxAge:{$max:"$age"}}}])
[
  { _id: 'calicut', minAge: 21, maxAge: 21 },
  { _id: 'azhichavatam', minAge: 28, maxAge: 28 },
  { _id: 'trivandrum', minAge: 17, maxAge: 27 },
  { _id: 'payyanakal', minAge: 22, maxAge: 22 }
]

4.       Write a MongoDB query using the $match stage to retrieve all customer documents whose customer_name starts with the letter “S”.

invoice> db.CUSTOMER.aggregate([{$match:{name:{$regex:/^S/,$options:"i"}}}])
[
  {
    _id: ObjectId('67ff72cb680736b5b0ef634c'),
    cust_id: 104,
    name: 'shana',
    ph_no: 936727217,
    city: 'azhichavatam',
    age: 28
  },
  {
    _id: ObjectId('67ff72cb680736b5b0ef634d'),
    cust_id: 105,
    name: 'shifa',
    ph_no: 9448453212,
    city: 'trivandrum',
    age: 17
  }
]


5.      Write a query using $lookup to join CUSTOMER and PRODUCT collections and display only customer name, product name, and price.


invoice> db.CUSTOMER.aggregate([ { $lookup: { from: "PRODUCT", localField: "pid", foreignField: "pid", as: "product_info" } }, { $project: { _id: 0, name: 1, pname: "$product_info.pname", price: "$product_info.price" } }])
[
  { name: 'frina', pname: [ 'pen' ], price: [ 15 ] },
  { name: 'aysha', pname: [ 'book' ], price: [ 45 ] },
  { name: 'raana', pname: [ 'book' ], price: [ 45 ] },
  { name: 'shana', pname: [ 'pen' ], price: [ 15 ] },
  { name: 'shifa', pname: [ 'book' ], price: [ 45 ] }
]
//VERIFIED
